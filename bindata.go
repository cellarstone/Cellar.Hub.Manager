package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func views_layout_layout_gohtml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x8c, 0x92,
		0x41, 0x8f, 0xd3, 0x30, 0x10, 0x85, 0xef, 0xfd, 0x15, 0xb3, 0x3e, 0x70,
		0x8b, 0xad, 0xa8, 0x07, 0x2e, 0x6e, 0x24, 0x58, 0x56, 0x42, 0x08, 0x54,
		0x24, 0x8a, 0xc4, 0x1e, 0xdd, 0x64, 0x9a, 0xb8, 0x4c, 0xec, 0x62, 0x4f,
		0xa0, 0x51, 0xb4, 0xff, 0x1d, 0xbb, 0x49, 0x0b, 0xaa, 0x38, 0x70, 0x7b,
		0x7e, 0x79, 0xfa, 0x26, 0x7e, 0xe3, 0x69, 0x6a, 0xf0, 0x60, 0x1d, 0x82,
		0x20, 0x33, 0xfa, 0x81, 0x19, 0xfb, 0x13, 0x19, 0x46, 0xf1, 0xf2, 0xb2,
		0xd2, 0x0f, 0xef, 0xb6, 0x8f, 0xbb, 0xe7, 0xcf, 0x4f, 0xd0, 0x71, 0x4f,
		0x15, 0xc0, 0x4a, 0x67, 0x01, 0x64, 0x5c, 0xbb, 0x11, 0xe8, 0x44, 0xb6,
		0x00, 0x74, 0x87, 0xa6, 0xa9, 0x92, 0x48, 0x92, 0x2d, 0x13, 0x56, 0x8f,
		0x48, 0x64, 0x42, 0x64, 0x9f, 0xb8, 0xef, 0x87, 0x3d, 0x14, 0xf0, 0xc9,
		0x38, 0xd3, 0x62, 0xd0, 0x6a, 0x0e, 0xcc, 0x61, 0xb2, 0xee, 0x3b, 0x74,
		0x01, 0x0f, 0x1b, 0xa1, 0x54, 0x6f, 0xce, 0x75, 0xe3, 0xe4, 0xde, 0x7b,
		0x8e, 0x1c, 0xcc, 0x29, 0x1f, 0x6a, 0xdf, 0xab, 0x9b, 0xa1, 0xd6, 0x72,
		0x2d, 0x5f, 0xab, 0x3a, 0xc6, 0x3f, 0x9e, 0xec, 0x6d, 0x4a, 0xc5, 0x28,
		0x20, 0x20, 0x6d, 0x44, 0xe4, 0x91, 0x30, 0x76, 0x88, 0x2c, 0xf2, 0x08,
		0xad, 0xe6, 0x3f, 0xcb, 0x72, 0xef, 0x9b, 0x71, 0x19, 0xdb, 0x95, 0xd5,
		0xc7, 0x37, 0xcf, 0xdb, 0xaf, 0x3b, 0xd8, 0x3d, 0x7d, 0xdb, 0xa5, 0x50,
		0xb9, 0x7c, 0x68, 0xec, 0xcf, 0x2a, 0xfa, 0x1e, 0x61, 0xae, 0x02, 0x18,
		0xcf, 0xac, 0x55, 0x76, 0x57, 0xb7, 0x00, 0xd4, 0x64, 0x62, 0xdc, 0x88,
		0xda, 0x3b, 0x36, 0xa9, 0xb7, 0x50, 0x1c, 0x68, 0xb0, 0x8d, 0x98, 0x11,
		0x29, 0xf3, 0x50, 0x14, 0xb0, 0x1d, 0x02, 0xe4, 0x00, 0x3a, 0x86, 0x5f,
		0x96, 0x08, 0x5a, 0x0f, 0x1d, 0x06, 0x94, 0x50, 0x14, 0xd7, 0xe0, 0x34,
		0x5d, 0xab, 0x06, 0x31, 0x5a, 0xa4, 0x46, 0x80, 0x4c, 0x9d, 0x5f, 0x18,
		0x7f, 0xcf, 0xcc, 0xbc, 0xe3, 0x8f, 0x01, 0xc3, 0x08, 0xaf, 0xe0, 0xed,
		0xf5, 0xe2, 0xf0, 0xe1, 0xcb, 0x8d, 0xa5, 0x63, 0x1d, 0xec, 0x89, 0x21,
		0x86, 0x3a, 0x17, 0x69, 0x8e, 0xe6, 0x2c, 0x5b, 0xef, 0x5b, 0x42, 0x73,
		0xb2, 0xf1, 0x52, 0x62, 0xf6, 0x14, 0xd9, 0x7d, 0x54, 0x33, 0x4a, 0x95,
		0xb2, 0x2c, 0xe5, 0x7a, 0x39, 0x5d, 0x5a, 0x3c, 0x46, 0x51, 0x69, 0x35,
		0xa3, 0xfe, 0xc9, 0xfd, 0xdf, 0x05, 0x1d, 0xef, 0xf7, 0x73, 0x4f, 0xd6,
		0x6a, 0x5e, 0x46, 0x6a, 0x7e, 0x79, 0x56, 0xd3, 0x84, 0xae, 0x49, 0x97,
		0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x10, 0x68, 0xe0, 0xee, 0x8d, 0x02,
		0x00, 0x00,
		},
		"views/layout/layout.gohtml",
	)
}

func views_processes2_gohtml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xaa, 0xae,
		0x4e, 0x49, 0x4d, 0xcb, 0xcc, 0x4b, 0x55, 0x50, 0xaa, 0xcc, 0x4c, 0xcd,
		0x49, 0x51, 0xaa, 0xad, 0xe5, 0xe2, 0x52, 0x50, 0xb0, 0xc9, 0x30, 0xb4,
		0x0b, 0x28, 0xca, 0x4f, 0x4e, 0x2d, 0x2e, 0x4e, 0x2d, 0xb6, 0xd1, 0x07,
		0xf2, 0x14, 0x14, 0xb8, 0x80, 0x10, 0x08, 0x6c, 0x0a, 0x8a, 0x52, 0xed,
		0x20, 0x4c, 0x10, 0xa8, 0xae, 0xd6, 0x73, 0x49, 0x2c, 0x49, 0x04, 0x6a,
		0x03, 0x4b, 0xea, 0x83, 0x65, 0x15, 0xb8, 0xb8, 0xaa, 0xab, 0x53, 0xf3,
		0x52, 0x6a, 0x6b, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x92, 0xce,
		0xba, 0x5f, 0x00, 0x00, 0x00,
		},
		"views/processes2.gohtml",
	)
}

func views_processes_gohtml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x2c, 0x8d,
		0x41, 0x0a, 0xc3, 0x40, 0x08, 0x45, 0xf7, 0x73, 0x8a, 0xcf, 0x1c, 0x20,
		0xa1, 0xfb, 0x34, 0xab, 0x1e, 0xa0, 0x57, 0x90, 0x19, 0xdb, 0x0e, 0x04,
		0x03, 0x63, 0x28, 0x14, 0xf1, 0xee, 0x75, 0xd2, 0xea, 0x46, 0xbf, 0x8f,
		0xa7, 0x59, 0xe5, 0x47, 0x13, 0x46, 0xfe, 0x34, 0xde, 0x6a, 0x76, 0x4f,
		0x09, 0x58, 0x5e, 0x97, 0xf5, 0xde, 0xf7, 0xc2, 0xaa, 0xac, 0xcb, 0x1c,
		0x1b, 0x90, 0xa2, 0x61, 0xd6, 0x49, 0x9e, 0x8c, 0xe9, 0x46, 0x07, 0xb9,
		0x8f, 0x28, 0xe8, 0xda, 0xde, 0x28, 0x1b, 0xa9, 0x5e, 0x73, 0xd9, 0xe5,
		0xa0, 0xf0, 0xf5, 0xbc, 0xfe, 0x8e, 0xa3, 0xcc, 0xa6, 0xf0, 0x9e, 0xe8,
		0x1c, 0xec, 0x29, 0x8b, 0x90, 0xa5, 0x8e, 0x77, 0xff, 0xe1, 0x1b, 0x00,
		0x00, 0xff, 0xff, 0x04, 0x8c, 0x48, 0xb8, 0x8a, 0x00, 0x00, 0x00,
		},
		"views/processes.gohtml",
	)
}

func views_actualdirectory_gohtml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x2c, 0x8d,
		0x51, 0x0a, 0xc3, 0x20, 0x0c, 0x86, 0xdf, 0x3d, 0xc5, 0x8f, 0x07, 0x68,
		0xd9, 0x7b, 0x57, 0x18, 0xf4, 0x22, 0x41, 0xb3, 0x4d, 0x10, 0x0b, 0xd6,
		0x0d, 0x4a, 0xc8, 0xdd, 0x17, 0x5d, 0x93, 0x97, 0xf0, 0xe5, 0xcf, 0x17,
		0x91, 0xc8, 0xcf, 0x54, 0x18, 0xfe, 0x4c, 0x9c, 0xa3, 0x57, 0x75, 0x0e,
		0x58, 0xde, 0xb7, 0xf5, 0x11, 0xda, 0x87, 0x32, 0xb6, 0x54, 0x39, 0xb4,
		0xbd, 0x9e, 0xcb, 0x6c, 0x10, 0x70, 0xd6, 0x10, 0xa9, 0x54, 0x5e, 0x8c,
		0x69, 0xa3, 0x46, 0xaa, 0x1d, 0xd9, 0x51, 0x4c, 0x5f, 0x84, 0x4c, 0xc7,
		0x71, 0xf7, 0x61, 0x2f, 0x8d, 0x4c, 0x5b, 0xfd, 0xfa, 0x5f, 0xf6, 0x12,
		0x99, 0x4c, 0x3f, 0xa2, 0xb3, 0x65, 0x87, 0xcc, 0x20, 0x97, 0xd8, 0xbf,
		0x5e, 0xc3, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x70, 0x47, 0x17, 0x91,
		0x00, 0x00, 0x00,
		},
		"views/actualdirectory.gohtml",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"views/layout/layout.gohtml": views_layout_layout_gohtml,
	"views/processes2.gohtml": views_processes2_gohtml,
	"views/processes.gohtml": views_processes_gohtml,
	"views/actualdirectory.gohtml": views_actualdirectory_gohtml,

}
